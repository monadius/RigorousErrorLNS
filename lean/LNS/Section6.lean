import Mathlib.Analysis.Calculus.LHopital
import LNS.Common
import LNS.Basic

noncomputable section

namespace LNS

open Real Filter Topology

def Q_lo (Œî r : ‚Ñù) := Q Œî 0 r

def Q_hi (Œî r : ‚Ñù) := (2 ^ (-r) + r * log 2 - 1) / (2 ^ (-Œî) + Œî * log 2 - 1)

def R_opt (Œî : ‚Ñù) :=
  let X := 2 ^ Œî
  logb 2 (-X * (2 * log (X + 1) - log X - 2 * log 2) / (2 * X * (log (X + 1) - log X - log 2) + X - 1))

variable {Œî r : Real}
variable (delta_pos : Œî > 0)

lemma lemma61 : Tendsto (fun i => Q Œî i r) atBot (ùìù (Q_hi Œî r)) := by
  sorry

lemma lemma62 (hr1 : 0 ‚â§ r) (hr2 : r < Œî) : AntitoneOn (fun i => Q Œî i r) (Set.Iic 0) := by
  sorry

lemma q_lower_bound (hi : i ‚â§ 0) (hr1 : 0 ‚â§ r) (hr2 : r < Œî) : Q_lo Œî r ‚â§ Q Œî i r :=
  lemma62 hr1 hr2 hi Set.right_mem_Iic hi

lemma q_upper_bound (hi : i ‚â§ 0) (hr1 : 0 ‚â§ r) (hr2 : r < Œî) : Q Œî i r ‚â§ Q_hi Œî r := by
  suffices h : ‚àÄ·∂† (x : ‚Ñù) in atBot, Q Œî i r ‚â§ Q Œî x r
  ¬∑ exact ge_of_tendsto (@lemma61 Œî r) h
  ¬∑ rw [eventually_atBot]
    exact ‚ü®i, fun j ji => lemma62 hr1 hr2 (le_trans ji hi) hi ji‚ü©

lemma lemma63 (hi : i ‚â§ 0) (hc : c ‚â§ 0) (hr1 : 0 ‚â§ r) (hr2 : r < Œî) :
    |Q Œî i r - Q Œî c r| ‚â§ Q_hi Œî (R_opt Œî) - Q_lo Œî (R_opt Œî) := by
  sorry

lemma lemma64 {Œî‚Çö} (hc : c ‚â§ 0) (hr1 : 0 ‚â§ r) (hr2 : r < Œî) :
    |Q Œî c r - Q Œî c (Int.ceil (r / Œî‚Çö) * Œî‚Çö)| ‚â§ 1 - Q_lo Œî (Œî - Œî‚Çö) := by
  sorry
